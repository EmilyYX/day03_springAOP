<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--Service对象配置-->
    <bean id="accountService" class="com.yanxia.study.service.impl.AccountServiceImpl"></bean>

    <!--spring中基于xml的AOP配置步骤
    1.把通知bean也交给Spring管理
    2.使用aop:config标签表明开始AOP的配置
    3.使用aop:aspect标签表明配置切面
          id属性：给切面提供一个唯一标识
          ref属性：是指定通知类bean的id
    4.在aop:aspect标签内部使用对应标签来配置通知的类型
          aop:before 表示前置通知
          method属性：用于指定哪个方法是前置通知
          pointcut属性：用于指定切入点表达式，该表达式指定对业务层中哪些方法增强
       切入点表达式的写法：
           关键字：execution(表达式)
           表达式：访问修饰符 返回值 包名.类名.方法名
           标准的表达式写法：
               public void com.yanxia.study.service.impl.AccountServiceImpl.saveAccount()
           访问修饰符可以省略(public private..)
           返回值可以使用通配符，表示任意返回值
           包名可以使用通配符，但是有几级包，就需要使用几个"*."
           包名可以使用..表示当前包及其子包
           类名和方法名都可以使用*通配
           可以直接写数据类型
             基本类型：int/char等
             引用类型：包名.类名 java.lang.String
             可以使用*通配符号表示必须有参数
             可以用..符号表示有无参数均可
           全通配写法：
               * *..*.*(..)

           实际开发中切入点表达式的通常写法
             切到业务层实现类下的所有方法
             * com.yanxia.study.service.impl.*.*(..)-->

    <bean id="logger" class="com.yanxia.study.utils.Logger"></bean>
    <aop:config>
        <aop:aspect id="logAdvice" ref="logger">
            <aop:before method="printBeforeLog"
                        pointcut="execution( * com.yanxia.study.service.impl.AccountServiceImpl.*(..))"></aop:before>
            <aop:after-returning method="printAfterLog"
                        pointcut="execution( * com.yanxia.study.service.impl.AccountServiceImpl.*(..))"></aop:after-returning>
            <aop:after-throwing method="printThrowLog"
                        pointcut="execution( * com.yanxia.study.service.impl.AccountServiceImpl.*(..))"></aop:after-throwing>
            <aop:after method="printFinalLog"
                        pointcut="execution( * com.yanxia.study.service.impl.AccountServiceImpl.*(..))"></aop:after>
        </aop:aspect>
    </aop:config>


</beans>